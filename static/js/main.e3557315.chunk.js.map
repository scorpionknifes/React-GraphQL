{"version":3,"sources":["GraphQL/JobFragment.tsx","GraphQL/JobsQuery.tsx","GraphQL/SearchQuery.tsx","Contexts/JobsContext.tsx","Components/SearchBarComponent/SearchBar.tsx","Components/MediaCardComponent/MediaCard.tsx","Components/SpinnerComponent/SpinnerComponent.tsx","Components/MediaGridComponent/MediaGrid.tsx","Components/AppBarComponent/AppBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["gql","JobFragment","JobsContext","createContext","JobsProvider","children","useState","jobs","setJobs","searchQuery","setSearchQuery","slug","setSlug","type","setType","loading","setLoading","input","jobQuery","useQuery","JobsQuery","variables","locationQuery","LocationQuery","useEffect","error","data","reverse","console","log","locations","length","Provider","value","handleSearch","search","SearchBar","HasFocus","setHasFocus","setSearch","useContext","className","Grid","container","spacing","item","xs","sm","TextField","required","id","label","variant","onClick","onChange","e","target","Button","color","MediaCard","props","Job","Card","direction","justify","alignItems","company","logoUrl","Avatar","alt","src","aria-label","name","charAt","title","CardContent","tags","map","i","Chip","key","commitment","countries","cities","size","href","applyUrl","Spinner","CircularProgress","MediaGrid","Cards","forEach","job","push","md","lg","Bar","AppBar","position","Toolbar","Typography","IconButton","edge","client","ApolloClient","uri","theme","createMuiTheme","breakpoints","values","xl","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e3557315.chunk.js","sourcesContent":["import gql from 'graphql-tag'\r\n\r\nexport default gql`  \r\nfragment JobFragment on Job {\r\n    id\r\n    title\r\n    slug\r\n    description\r\n    applyUrl\r\n  \r\n    cities {\r\n        name\r\n    }\r\n  \r\n    countries {\r\n        name\r\n    }\r\n  \r\n    remotes {\r\n        name\r\n    }\r\n  \r\n    tags {\r\n        name\r\n    }\r\n  \r\n    company {\r\n        name\r\n        logoUrl\r\n    }\r\n  \r\n    commitment {\r\n        title\r\n    }\r\n}`","import gql from 'graphql-tag'\r\nimport JobFragment from './JobFragment'\r\n\r\nexport default gql`\r\nquery Jobs($input: JobsInput) {\r\n    jobs(input: $input) {\r\n        ...JobFragment\r\n    }\r\n}\r\n${JobFragment}\r\n`","import gql from 'graphql-tag'\r\n\r\nexport default gql`\r\nquery Locations($input: LocationsInput!) {\r\n    locations(input: $input) {\r\n        type\r\n        slug\r\n    }\r\n}\r\n`","import React, { useState, useEffect, createContext } from 'react'\r\nimport { Props, JobsInput, Job, JobsContextType, LocationsInput } from '../Common/Types'\r\nimport JobsQuery from '../GraphQL/JobsQuery'\r\nimport LocationQuery from '../GraphQL/SearchQuery'\r\nimport { useQuery } from '@apollo/react-hooks'\r\n\r\nconst JobsContext = createContext({} as JobsContextType);\r\n\r\nconst JobsProvider = ({ children }: Props) => {\r\n\r\n    const [jobs, setJobs] = useState<Job[] | null>(null)\r\n\r\n    const [searchQuery, setSearchQuery] = useState<LocationsInput | null>(null)\r\n    const [slug, setSlug] = useState(\"\")\r\n    const [type, setType] = useState(\"\")\r\n    const [loading, setLoading] = useState(true)\r\n    const input: JobsInput = { slug, type }\r\n    const jobQuery = useQuery(JobsQuery, {\r\n        variables: { input }\r\n    })\r\n\r\n    const locationQuery = useQuery(LocationQuery, {\r\n        variables: { input: searchQuery }\r\n    })\r\n\r\n    useEffect(() => {\r\n        const { loading, error, data } = jobQuery\r\n        if (!error && !loading && data) {\r\n            setJobs(data.jobs.reverse())\r\n            console.log(data.jobs)\r\n        }\r\n    }, [jobQuery]);\r\n\r\n    useEffect(() => {\r\n        const { loading, error, data } = locationQuery\r\n        if (!error && !loading && data) {\r\n            const { locations } = data\r\n            console.log(locations)\r\n            if (locations.length === 0) {\r\n                console.log(\"no results\")\r\n                setJobs(null)\r\n                return\r\n            }\r\n            setSlug(locations[0].slug)\r\n            setType(locations[0].type)\r\n        }\r\n    }, [locationQuery])\r\n\r\n    useEffect(() => {\r\n        setLoading(jobQuery.loading || locationQuery.loading)\r\n    }, [jobQuery.loading, locationQuery.loading])\r\n\r\n    const handleSearch = (search: string) => {\r\n        setJobs([])\r\n        setSearchQuery({ value: search })\r\n    }\r\n\r\n    return (\r\n        <JobsContext.Provider value={{\r\n            loading,\r\n            slug, setSlug,\r\n            type, setType,\r\n            jobs, setJobs,\r\n            handleSearch,\r\n        }}>\r\n            {children}\r\n        </JobsContext.Provider>\r\n    );\r\n};\r\n\r\nexport { JobsContext, JobsProvider }","import React, { useState, useContext } from 'react'\r\nimport { Grid, TextField, Button } from '@material-ui/core'\r\nimport './SearchBar.css';\r\nimport { JobsContext } from '../../Contexts/JobsContext'\r\n\r\nconst SearchBar = () => {\r\n    const [HasFocus, setHasFocus] = useState<boolean>(false);\r\n    const [search, setSearch] = useState(\"\")\r\n    const { handleSearch } = useContext(JobsContext)\r\n    \r\n    const handleSubmit = () =>{\r\n        handleSearch(search)\r\n    }\r\n\r\n    return <div className=\"SearchBarContainer\">\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={6} sm={6}>\r\n                <TextField\r\n                    className=\"SearchTextField\"\r\n                    required\r\n                    id=\"outlined-required\"\r\n                    label=\"Location\"\r\n                    variant=\"outlined\"\r\n                    error={HasFocus && search === \"\"}\r\n                    onClick={() => setHasFocus(true)}\r\n                    value={search}\r\n                    onChange={e => setSearch(e.target.value)}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={6} sm={6}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>Submit</Button>\r\n            </Grid>\r\n        </Grid>\r\n    </div>\r\n}\r\n\r\nexport default SearchBar","import React from 'react';\r\n\r\nimport { Card, Grid, CardContent, Chip, Avatar, Button } from '@material-ui/core';\r\nimport './MediaCard.css';\r\nimport { Job } from '../../Common/Types';\r\n\r\ntype MediaCardProps = {\r\n    Job: Job\r\n}\r\n\r\nconst MediaCard = (props: MediaCardProps) => {\r\n    const { Job } = props;\r\n    return (\r\n        <Card className=\"MediaCardContainer\">\r\n            <Grid className=\"MediaCardAvatarBox\" container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n                <div className=\"MediaCardAvatarInner\">\r\n                    <Grid>\r\n                        {\r\n                            !Job.company.logoUrl || Job.company.logoUrl === \"\" ?\r\n                                <Avatar aria-label=\"recipe\" className=\"MediaCardAvatar\">{Job.company.name.charAt(0)}</Avatar> :\r\n                                <Avatar alt=\"Remy Sharp\" className=\"MediaCardAvatar\" src={Job.company.logoUrl} />\r\n                        }\r\n\r\n                    </Grid>\r\n                    <Grid container direction=\"column\" justify=\"center\" alignItems=\"flex-start\">\r\n                        <>\r\n                            <span><b>{Job.title}</b> </span>\r\n                            <span>at {Job.company.name} </span>\r\n                        </>\r\n                    </Grid>\r\n                </div>\r\n                <CardContent>\r\n                    <div className=\"MediaCardTags\">\r\n                        {\r\n                            Job.tags?.map(({ name }, i) => {\r\n                                return <Chip key={i} className=\"MediaCardTag\" variant=\"outlined\" color=\"primary\" label={name} />\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <div className=\"MediaCardTags\">\r\n                        <Chip className=\"MediaCardTag\" variant=\"outlined\"  label={Job.commitment.title} />\r\n                        {\r\n                            Job.countries?.map(({ name }, i) => {\r\n                                return <Chip key={i} className=\"MediaCardTag\" variant=\"outlined\" color=\"primary\" label={name} />\r\n                            })\r\n                        }\r\n                        {\r\n                            Job.cities?.map(({ name }, i) => {\r\n                                return <Chip key={i} className=\"MediaCardTag\" variant=\"outlined\" color=\"secondary\" label={name} />\r\n                            })\r\n                        }\r\n\r\n                    </div>\r\n                </CardContent>\r\n                <div className=\"MediaCardApplyButton\">\r\n                <Button variant=\"contained\" size=\"large\" color=\"primary\" href={Job.applyUrl} >Apply</Button>\r\n                </div>\r\n            </Grid>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default MediaCard","import React from 'react'\r\nimport { CircularProgress } from '@material-ui/core'\r\nimport './SpinnerComponent.css'\r\n\r\nconst Spinner = () => {\r\n    return <div className=\"SpinnerComponent\">\r\n        <CircularProgress />\r\n    </div>\r\n}\r\n\r\nexport default Spinner ","import React, { useContext } from 'react';\r\nimport MediaCard from '../MediaCardComponent/MediaCard';\r\nimport { Grid } from '@material-ui/core';\r\nimport './MediaGrid.css';\r\nimport { Job } from '../../Common/Types';\r\nimport { JobsContext } from '../../Contexts/JobsContext';\r\nimport Spinner from '../SpinnerComponent/SpinnerComponent';\r\n\r\n\r\nconst MediaGrid = () => {\r\n    const { jobs, loading } = useContext(JobsContext)\r\n\r\n    var Cards: JSX.Element[] = [];\r\n    jobs?.forEach((job: Job, i: Number) => {\r\n        if (!job) {\r\n            return;\r\n        }\r\n        Cards.push(\r\n            <Grid key={\"card_\" + i} item sm={6} md={4} lg={3} container spacing={2} className=\"MediaGridCard\">\r\n                <MediaCard Job={job} />\r\n            </Grid>)\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <Grid container spacing={3} className=\"MediaGridContainer\">\r\n                {loading ? <Spinner /> : Cards === [] || !jobs ? <div>No Jobs Found</div> : Cards}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\nexport default MediaGrid","import React from 'react'\r\nimport { AppBar, Toolbar, IconButton, Typography } from '@material-ui/core'\r\nimport SearchBar from '../SearchBarComponent/SearchBar'\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport './AppBar.css'\r\n\r\nconst Bar = () => {\r\n    return <AppBar position=\"static\">\r\n        <Toolbar>\r\n            <Typography variant=\"h5\" >\r\n                GraphQL Jobs\r\n            </Typography>\r\n            <SearchBar/>\r\n            <IconButton  href=\"https://github.com/scorpionknifes/React-GraphQL\" edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                <GitHubIcon />\r\n            </IconButton>\r\n        </Toolbar>\r\n    </AppBar>\r\n}\r\n\r\nexport default Bar","import React from 'react';\nimport './App.css';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core';\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { MediaGrid, AppBar } from './Components';\nimport { JobsProvider } from './Contexts/JobsContext';\n\nconst client = new ApolloClient({\n    uri: \"https://api.graphql.jobs\"\n});\n\nconst theme = createMuiTheme({\n    breakpoints: {\n        values: {\n            xs: 0,\n            sm: 700,\n            md: 960,\n            lg: 1280,\n            xl: 1920,\n        },\n    },\n})\n\nconst App = () => {\n    return (\n        <div className=\"App\" >\n            <ApolloProvider client={client}>\n                <JobsProvider>\n                    <MuiThemeProvider theme={theme}>\n                        <AppBar />\n                        <MediaGrid />\n                    </MuiThemeProvider>\n                </JobsProvider>\n            </ApolloProvider>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}